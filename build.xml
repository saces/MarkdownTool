<?xml version="1.0"?>
<!-- ant build file for MarkdownTool -->

<project name="MarkdownTool" default="dist" basedir=".">

    <property file="build.properties"/>
    <property name="source-version" value="1.7"/>
    <property name="target-version" value="1.7"/>
    <property name="build" location="build/"/>
    <property name="dist" location="dist/"/>
    <property name="lib.dir" location="libs"/>
    <property name="src" location="src/"/>
    <property name="jarname" value="MarkdownTool.jar"/>
    <property name="srcname" value="MarkdownTool-src.zip"/>
    <property name="srcdepname" value="MarkdownTool-src-with-dependencies.zip"/>
    <property name="version.src" value="de/saces/markdowntool/Version.java" />
    <property name="version.build" value="de/saces/markdowntool/Version.class" />
    <property name="pegdown.version" value="1.5.0" />
    <property name="pegdown.jar" value="pegdown-${pegdown.version}.jar" />
    <property name="pegdown.url" value="http://repo1.maven.org/maven2/org/pegdown/pegdown/${pegdown.version}/${pegdown.jar}" />
    <property name="parboiled.version" value="1.1.7" />
    <property name="parboiled-core.version" value="${parboiled.version}" />
    <property name="parboiled-core.jar" value="parboiled-core-${parboiled-core.version}.jar" />
    <property name="parboiled-core.url" value="http://repo1.maven.org/maven2/org/parboiled/parboiled-core/${parboiled-core.version}/${parboiled-core.jar}" />
    <property name="parboiled-java.version" value="${parboiled.version}" />
    <property name="parboiled-java.jar" value="parboiled-java-${parboiled-java.version}.jar" />
    <property name="parboiled-java.url" value="http://repo1.maven.org/maven2/org/parboiled/parboiled-java/${parboiled-java.version}/${parboiled-java.jar}" />
    <property name="asm-all.version" value="5.0.4" />
    <property name="asm-all.jar" value="asm-all-${asm-all.version}.jar" />
    <property name="asm-all.url" value="http://central.maven.org/maven2/org/ow2/asm/asm-all/${asm-all.version}/${asm-all.jar}" />

    <exec executable="git"
        failifexecutionfails="false"
        errorProperty="git.errror"
        outputproperty="git.describe"
        resultproperty="git.result">
        <arg value="describe" />
        <arg value="--always" />
        <arg value="--abbrev=4" />
        <arg value="--dirty" />
    </exec>

    <condition property="git.revision" value="${git.describe}" else="@unknown@">
        <and>
            <equals arg1="${git.result}" arg2="0" />
            <isset property="git.describe" />
        </and>
    </condition>

    <target name="mkdir">
        <mkdir dir="${build}"/>
        <mkdir dir="${dist}"/>
        <mkdir dir="${lib.dir}"/>
    </target>

    <target name="libs" depends="mkdir">
        <get src="${pegdown.url}" dest="${lib.dir}" verbose="on" usetimestamp="on"/>
        <get src="${parboiled-core.url}" dest="${lib.dir}" verbose="on" usetimestamp="on"/>
        <get src="${parboiled-java.url}" dest="${lib.dir}" verbose="on" usetimestamp="on"/>
        <get src="${asm-all.url}" dest="${lib.dir}" verbose="on" usetimestamp="on"/>
    </target>

    <target name="compile" depends="libs">
        <!-- Create the Version file with patched revision number in ${build} -->
        <copy file="${src}/${version.src}" tofile="${build}/${version.src}" overwrite="true" />
        <delete file="${build}/${version.build}" quiet="true" />
        <replace file="${build}/${version.src}">
            <replacefilter token="@custom@" value="${git.revision}"/>
        </replace>
        <echo message="Updated build version to ${git.revision} in ${build}/${version.src}"/>

        <!-- Force compile of Version.java in case compile of ${src} didn't trigger it -->
        <javac srcdir="${build}" destdir="${build}" debug="on" optimize="on" source="${source-version}" target="${target-version}" includeantruntime="false">
            <include name="${version.src}"/>
        </javac>

        <javac srcdir="src/" destdir="${build}" debug="on" optimize="on" source="${source-version}" target="${target-version}" includeantruntime="false">
            <classpath>
                <pathelement location="${lib.dir}/${pegdown.jar}"/>
                <pathelement location="${lib.dir}/${parboiled-java.jar}"/>
            </classpath>
            <include name="**/*.java"/>
            <exclude name="**/*Test.java"/>
            <exclude name="${version.src}"/>
        </javac>
    </target>

    <target name="dist" depends="clean, compile"
        description="generate the distribution" >
        <jar jarfile="${dist}/${jarname}" filesetmanifest="skip">
            <manifest>
                <attribute name="Main-Class" value="de.saces.markdowntool.MarkdownTool"/>
            </manifest>
            <fileset dir="src/" casesensitive="no">
                <include name="**/*.txt"/>
            </fileset>
            <fileset dir="${build}/"/>
            <zipfileset src="${lib.dir}/${pegdown.jar}"/>
            <zipfileset src="${lib.dir}/${parboiled-core.jar}"/>
            <zipfileset src="${lib.dir}/${parboiled-java.jar}"/>
            <zipfileset src="${lib.dir}/${asm-all.jar}"/>
        </jar>
        <zip destfile="${dist}/${srcname}" filesonly="true" compress="true">
            <zipfileset dir="."
                prefix = ""
                excludes=".*"
                includes="src/**/* build.xml README.md template.html" />
        </zip>
        <zip destfile="${dist}/${srcdepname}" filesonly="true" compress="true">
            <zipfileset dir="."
                prefix = ""
                excludes=".*"
                includes="src/**/* build.xml README.md template.html" />
            <zipfileset dir="${lib.dir}"
                prefix = "libs"
                excludes=".*"
                includes="${pegdown.jar} ${parboiled-core.jar}
                    ${parboiled-java.jar}
                    ${asm-all.jar}" />
        </zip>
        
    </target>

    <target name="clean" description="Delete class files and docs dir.">
        <delete dir="${build}"/>
        <delete dir="${dist}"/>
    </target>

    <target name="distclean" depends="clean">
        <delete dir="${lib.dir}"/>
    </target>

</project>
